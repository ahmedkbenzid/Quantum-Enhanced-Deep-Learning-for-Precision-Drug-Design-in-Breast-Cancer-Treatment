{"ast":null,"code":"// src/services/authService.js\n\n// Simulated authentication service\nconst authService = {\n  login: async (username, password) => {\n    // Replace this with real authentication logic (e.g., API call)\n    if (username === \"admin\" && password === \"password\") {\n      localStorage.setItem(\"user\", JSON.stringify({\n        username,\n        role: \"admin\"\n      }));\n      return {\n        success: true,\n        user: {\n          username,\n          role: \"admin\"\n        }\n      };\n    }\n    if (username === \"pharma\" && password === \"password\") {\n      localStorage.setItem(\"user\", JSON.stringify({\n        username,\n        role: \"pharma\"\n      }));\n      return {\n        success: true,\n        user: {\n          username,\n          role: \"pharma\"\n        }\n      };\n    }\n    return {\n      success: false,\n      message: \"Invalid credentials\"\n    };\n  },\n  logout: () => {\n    localStorage.removeItem(\"user\");\n  },\n  getCurrentUser: () => {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    return user;\n  }\n};\nexport default authService;\n// src/services/authService.js\n\n// Simulated authentication service\nexport const login = async (username, password) => {\n  // Replace this with real authentication logic (e.g., API call)\n  if (username === \"admin\" && password === \"password\") {\n    localStorage.setItem(\"user\", JSON.stringify({\n      username,\n      role: \"admin\"\n    }));\n    return {\n      success: true,\n      user: {\n        username,\n        role: \"admin\"\n      }\n    };\n  }\n  if (username === \"pharma\" && password === \"password\") {\n    localStorage.setItem(\"user\", JSON.stringify({\n      username,\n      role: \"pharma\"\n    }));\n    return {\n      success: true,\n      user: {\n        username,\n        role: \"pharma\"\n      }\n    };\n  }\n  return {\n    success: false,\n    message: \"Invalid credentials\"\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem(\"user\");\n};\nexport const getCurrentUser = () => {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  return user;\n};","map":{"version":3,"names":["authService","login","username","password","localStorage","setItem","JSON","stringify","role","success","user","message","logout","removeItem","getCurrentUser","parse","getItem"],"sources":["C:/Users/ml933/Desktop/new/drug-design-breast-cancer/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\n\r\n// Simulated authentication service\r\nconst authService = {\r\n    login: async (username, password) => {\r\n      // Replace this with real authentication logic (e.g., API call)\r\n      if (username === \"admin\" && password === \"password\") {\r\n        localStorage.setItem(\"user\", JSON.stringify({ username, role: \"admin\" }));\r\n        return { success: true, user: { username, role: \"admin\" } };\r\n      }\r\n      if (username === \"pharma\" && password === \"password\") {\r\n        localStorage.setItem(\"user\", JSON.stringify({ username, role: \"pharma\" }));\r\n        return { success: true, user: { username, role: \"pharma\" } };\r\n      }\r\n      return { success: false, message: \"Invalid credentials\" };\r\n    },\r\n    \r\n    logout: () => {\r\n      localStorage.removeItem(\"user\");\r\n    },\r\n  \r\n    getCurrentUser: () => {\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      return user;\r\n    }\r\n  };\r\n  \r\n  export default authService;\r\n  // src/services/authService.js\r\n\r\n// Simulated authentication service\r\nexport const login = async (username, password) => {\r\n  // Replace this with real authentication logic (e.g., API call)\r\n  if (username === \"admin\" && password === \"password\") {\r\n    localStorage.setItem(\"user\", JSON.stringify({ username, role: \"admin\" }));\r\n    return { success: true, user: { username, role: \"admin\" } };\r\n  }\r\n  if (username === \"pharma\" && password === \"password\") {\r\n    localStorage.setItem(\"user\", JSON.stringify({ username, role: \"pharma\" }));\r\n    return { success: true, user: { username, role: \"pharma\" } };\r\n  }\r\n  return { success: false, message: \"Invalid credentials\" };\r\n};\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem(\"user\");\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  return user;\r\n};"],"mappings":"AAAA;;AAEA;AACA,MAAMA,WAAW,GAAG;EAChBC,KAAK,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACnC;IACA,IAAID,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;MACnDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL,QAAQ;QAAEM,IAAI,EAAE;MAAQ,CAAC,CAAC,CAAC;MACzE,OAAO;QAAEC,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAE;UAAER,QAAQ;UAAEM,IAAI,EAAE;QAAQ;MAAE,CAAC;IAC7D;IACA,IAAIN,QAAQ,KAAK,QAAQ,IAAIC,QAAQ,KAAK,UAAU,EAAE;MACpDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL,QAAQ;QAAEM,IAAI,EAAE;MAAS,CAAC,CAAC,CAAC;MAC1E,OAAO;QAAEC,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAE;UAAER,QAAQ;UAAEM,IAAI,EAAE;QAAS;MAAE,CAAC;IAC9D;IACA,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEE,OAAO,EAAE;IAAsB,CAAC;EAC3D,CAAC;EAEDC,MAAM,EAAEA,CAAA,KAAM;IACZR,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMJ,IAAI,GAAGJ,IAAI,CAACS,KAAK,CAACX,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,OAAON,IAAI;EACb;AACF,CAAC;AAED,eAAeV,WAAW;AAC1B;;AAEF;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACjD;EACA,IAAID,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;IACnDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,QAAQ;MAAEM,IAAI,EAAE;IAAQ,CAAC,CAAC,CAAC;IACzE,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEC,IAAI,EAAE;QAAER,QAAQ;QAAEM,IAAI,EAAE;MAAQ;IAAE,CAAC;EAC7D;EACA,IAAIN,QAAQ,KAAK,QAAQ,IAAIC,QAAQ,KAAK,UAAU,EAAE;IACpDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,QAAQ;MAAEM,IAAI,EAAE;IAAS,CAAC,CAAC,CAAC;IAC1E,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEC,IAAI,EAAE;QAAER,QAAQ;QAAEM,IAAI,EAAE;MAAS;IAAE,CAAC;EAC9D;EACA,OAAO;IAAEC,OAAO,EAAE,KAAK;IAAEE,OAAO,EAAE;EAAsB,CAAC;AAC3D,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAC1BR,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAMJ,IAAI,GAAGJ,IAAI,CAACS,KAAK,CAACX,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC,CAAC;EACrD,OAAON,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}